@page "/"
@using Lucidly.Common
@using Lucidly.Common.Models
@using Lucidly.UI.Utils
@using Markdig
@using Microsoft.AspNetCore.SignalR.Client
@using ModelContextProtocol.Client
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject ModalService ModalService;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net
@using System.Web
@using System.Text
@using ModelContextProtocol.Protocol
@inject ProtectedLocalStorage ProtectedLocalStorage

@inject OAuthHandler OAuthHandler
@inject IJSRuntime JS
@inject HttpClient Http
@implements IDisposable
 <GridRow >
        <GridCol Span="22" Offset="1" >
               <div class="chat-container">
    	<Flex  Align="FlexAlign.FlexStart" Direction="FlexDirection.Vertical" Class="ant-chat-content-list">
		 <AntList DataSource="@datas" TItem="Data"  Class="comment-list">
			<ListItem>
				<Comment Actions="@context.Actions" Avatar="@context.Avatar" Author="@context.Author" DatetimeTemplate="@context.Datetime"
				ContentTemplate="@context.Content">
				</Comment>
			 </ListItem>
		 </AntList>
	
		   
		</Flex>
  </div>
  <div class="chat-input">
    <Flex Gap="FlexGap.Middle"   Direction="FlexDirection.Vertical"
		  Style="width: 100%; max-width: 90vw; border-radius:6px; border:1px solid #40a9ff; padding: 16px;">
		<Flex Justify="FlexJustify.Right" Align="FlexAlign.Start" Style="width: 100%;" >
		  <Mentions  Value="@recognizedText"  Class="ant-mentions-ovveride" ValueChanged="OnValueChanged"  Loading="true" LoadOptions="@LoadMentions" >
				<TextareaTemplate Context="context" >
					<TextArea RefBack=@context.RefBack
							  OnInput=@context.OnInput
							  BindOnInput=false
							  OnkeyDown=context.OnKeyDown
							  Value=@context.Value
							  AutoFocus="true" 
							  Placeholder="please enter @@"
							  MinRows="2" 
							  MaxRows="2"
							
							  Bordered="false"/>
				</TextareaTemplate>
			</Mentions>

		  </Flex>
		<Flex Style="width: 100%;" Gap="FlexGap.Middle" Justify="FlexJustify.SpaceBetween" Direction="FlexDirection.Horizontal">

		<Flex Justify="FlexJustify.FlexEnd" Align="FlexAlign.FlexEnd">
			<Segmented Block TValue="ChatModeEnum" OnChange="OnChatModeChange">
				  <SegmentedItem Value=@(ChatModeEnum.Solo)>
						<Tooltip Placement="Placement.TopRight" Title="Solo Mode">
							<Button Type="ButtonType.Text"  Size="ButtonSize.Small" Shape="ButtonShape.Round" Icon="@IconType.Outline.Comment" />
						</Tooltip>
				  </SegmentedItem>
				  <SegmentedItem Value=@(ChatModeEnum.Collaborative)>
						<Tooltip Placement="Placement.TopLeft" Title="Collaboration Mode">
							<Button Type="ButtonType.Text"  Size="ButtonSize.Small" Shape="ButtonShape.Round" Icon="@IconType.Outline.Partition" />   
						</Tooltip>
				  </SegmentedItem>
			</Segmented>

		</Flex>
			<Flex Justify="FlexJustify.Start" Align="FlexAlign.Start" Gap="FlexGap.Small" Direction="FlexDirection.Horizontal">
				<Dropdown Trigger="@(new Trigger[] { Trigger.Click })">
					<Overlay>
						<Menu>
							<MenuItem >
								Existing Tools
							</MenuItem>
							<MenuItem OnClick="OnAddNewMcpToolClick">
								Add new MCP server
							</MenuItem>
						</Menu>
					</Overlay>
					<ChildContent>
					<Badge Size="BadgeSize.Small" Count="totalToolsCount">
						<Button Type="ButtonType.Default" Shape="ButtonShape.Round" Icon="@IconType.Outline.Tool" />
					</Badge>	
					</ChildContent>
				</Dropdown>

						@if (_agentsVisible)
						{
							<Dropdown>
								<Overlay>
									<Menu>
										<MenuItem>
											<a target="_blank" rel="noopener noreferrer" href="http://www.alipay.com/">
												1st menu item
											</a>
										</MenuItem>
										<MenuItem>
											<a target="_blank" rel="noopener noreferrer" href="http://www.taobao.com/">
												2nd menu item
											</a>
										</MenuItem>
										<MenuItem>
											<a target="_blank" rel="noopener noreferrer" href="http://www.tmall.com/">
												3rd menu item
											</a>
										</MenuItem>
									</Menu>
								</Overlay>
								<ChildContent>
								<Badge Size="BadgeSize.Small" Count="5">
									<Button Type="ButtonType.Default" Shape="ButtonShape.Round" Icon="@IconType.Outline.Robot"   OnClick="()=>_visible=true"/>
								</Badge>	
								</ChildContent>
							</Dropdown>		
						}
						@if (isListening)
						{
							<Button Type="ButtonType.Primary" Shape="ButtonShape.Round" Icon="@IconType.Outline.AudioMuted" @onclick="StopSpeechRecognition" />
						}
						else
						{
							<Button Type="ButtonType.Default" Shape="ButtonShape.Round" Icon="@IconType.Outline.Audio" @onclick="StartSpeechRecognition" />
							
						}
						@if (isStreaming)
						{	<Button Type="ButtonType.Primary" Shape="ButtonShape.Circle"
							Icon="@IconType.Outline.Loading"  @onclick="onCancel" />

						}
						else
						{
							<Button Type="ButtonType.Primary" Shape="ButtonShape.Circle"
							Disabled=@(string.IsNullOrEmpty(recognizedText))
							Icon="@IconType.Outline.Send" @onclick="onSubmit" />
						}
			</Flex>
		</Flex>
</Flex>
 
  </div>
        </GridCol>
    </GridRow>
 
<Modal Title="@("Title")" @bind-Visible="@_visible" >
    <Header>
        <Icon Type="@IconType.Outline.Edit" /> Edit
    </Header>
    <ChildContent>
<Tabs Centered>
	<TabPane Tab="Existing MCP Servers" Key="1">
		<Collapse DefaultActiveKey="@(new[]{"1"})" OnChange="Callback" Animation>
    <Panel Header="This is panel header 1" Key="1">
        <p>@text</p>
    </Panel>
    <Panel Key="2">
        <HeaderTemplate>
            This is panel header 2
        </HeaderTemplate>
        <ChildContent>
            <p>@text</p>
        </ChildContent>
    </Panel>
    <Panel Header="This is panel header 3" Key="3" >
        <p>@text</p>
    </Panel>
	<Panel Header="This is panel header 1" Key="1">
        <p>@text</p>
    </Panel>
    <Panel Key="2">
        <HeaderTemplate>
            This is panel header 2
        </HeaderTemplate>
        <ChildContent>
            <p>@text</p>
        </ChildContent>
    </Panel>
    <Panel Header="This is panel header 3" Key="3" >
        <p>@text</p>
    </Panel><Panel Header="This is panel header 1" Key="1">
        <p>@text</p>
    </Panel>
    <Panel Key="2">
        <HeaderTemplate>
            This is panel header 2
        </HeaderTemplate>
        <ChildContent>
            <p>@text</p>
        </ChildContent>
    </Panel>
    <Panel Header="This is panel header 3" Key="3" >
        <p>@text</p>
    </Panel><Panel Header="This is panel header 1" Key="1">
        <p>@text</p>
    </Panel>
    <Panel Key="2">
        <HeaderTemplate>
            This is panel header 2
        </HeaderTemplate>
        <ChildContent>
            <p>@text</p>
        </ChildContent>
    </Panel>
    <Panel Header="This is panel header 3" Key="3" >
        <p>@text</p>
    </Panel>
</Collapse>
	</TabPane>
	<TabPane Tab="Add MCP Server" Key="2">
		Content of Tab Pane 2
	</TabPane>
	
</Tabs>
    </ChildContent>
</Modal>

 
	<style>html, body {
  scroll-behavior: smooth; /* or remove entirely */
}
    .chat-container {
      flex: 1;
	  min-height:75vh;
    }

    .message {
      margin-bottom: 12px;
      padding: 10px;
      border-radius: 8px;
      max-width: 70%;
    }

    /* Fixed input area */
    .chat-input {
      position: sticky;
      bottom: 0px;
      background: #fff;
      z-index: 1;
	  padding-bottom: 12px;
    }

    .chat-input input {
      width: 100%;
      padding: 10px;
      border-radius: 20px;
      border: 1px solid #ccc;
      outline: none;
    }.ant-mentions-ovveride{
			display:contents;
		} 
		.ant-timeline-item{
			padding-bottom:10px
		}

		.ant-timeline-item-last > .ant-timeline-item-content{
			min-height:0px;
		}
		/* 
			.ant-chat-content-list {min-height:69vh;overflow-y:hidden;  margin-right: 16px;
    }.ant-chat-content-list:hover {
        margin-right: 0;
overflow-y:auto;
    } */
	</style>
@code {
	private async Task OnPressEnter(PressEnterEventArgs e)
    {
		if (!e.CtrlKey)
            {
       
				if (!string.IsNullOrEmpty(recognizedText))
				{
					await onSubmit();
					recognizedText = string.Empty;
				}  
				e.PreventLineBreak();
            }
    }
	public async Task<IEnumerable<MentionsDynamicOption>> LoadMentions(string search, CancellationToken cancellationToken)
    {
         
        if (cancellationToken.IsCancellationRequested)
        {
            return Enumerable.Empty<MentionsDynamicOption>();
        }
			var tools =   AvailableTools.SelectMany(x=>x.Tools)!;

			if (!string.IsNullOrEmpty(search))
			{
				return tools.Where(x=>x.Name.Contains(search)).Select(x => new MentionsDynamicOption
			{
				Value = x.Name,
				Display = OptionDisplay(x)
			});
		}
        return tools.Select(x => new MentionsDynamicOption
        {
            Value = x.Name,
            Display = OptionDisplay(x)
        });
    }
	    private RenderFragment<McpTool> OptionDisplay => (tool) =>@<div style="width:auto;max-width:65vw">
																		<Text Strong Style="text-wrap: wrap;" >@tool.Name</Text>
																		<div>
																		<Text Type="TextElementType.Secondary" Style="text-wrap: wrap;">@tool.Description</Text>
																		</div>
																	</div>;

    bool _visible = false;
	int totalToolsCount = 0;

    ChatModeEnum _mode = ChatModeEnum.Solo;
	bool _agentsVisible = false;
	bool _addNewMCPServerModalVisible = false;
	 IEnumerable<McpTool> selectedRows;
	 IEnumerable<AdditionalParameters> selectedServerHeaderRows;


	RenderFragment FormTemplate()
    {
	return 
        @<Form
			Layout="@FormLayout.Vertical" 
				  Model="@model"
				  LabelColSpan="24"
				  WrapperColSpan="24"
				  OnFinish="OnFinish"
				  OnFinishFailed="OnFinishFailed"
				  @ref="@_form">
			
				  <GridRow Gutter="16">
						  <GridCol Span="24">
		  			<FormItem Label="Name">
							<Input @bind-Value="@context.Name"/>
						</FormItem>
				 </GridCol>
					<GridCol Class="gutter-row" Span="8">
						 <FormItem Label="Transport Mode" >
							<RadioGroup @bind-Value="@context.MCPTransportMode" ButtonStyle="RadioButtonStyle.Solid">
								<Radio RadioButton Value="MCPTransportMode.Sse">@MCPTransportMode.Sse</Radio>
								<Radio RadioButton Value="MCPTransportMode.StreamableHttp">@MCPTransportMode.StreamableHttp</Radio>
							</RadioGroup>
						</FormItem>
					</GridCol>
					<GridCol Class="gutter-row" Span="8">
					   <FormItem Label="Authentication Type" >
							<RadioGroup @bind-Value="@context.McpClientAuthenticationMode" ButtonStyle="RadioButtonStyle.Solid">
								<Radio RadioButton Value="McpClientAuthenticationMode.ApiKey">@McpClientAuthenticationMode.ApiKey</Radio>
								<Radio RadioButton Value="McpClientAuthenticationMode.OAuth">@McpClientAuthenticationMode.OAuth</Radio>
							</RadioGroup>
						</FormItem>
					</GridCol>
					<GridCol Class="gutter-row" Span="8">
							@if (context.McpClientAuthenticationMode == McpClientAuthenticationMode.OAuth)
							{
      
		
							  <FormItem Label="Client Registration" >
									<RadioGroup @bind-Value="@context.McpClientRegistrationMode" ButtonStyle="RadioButtonStyle.Solid">
										<Radio RadioButton Value="McpClientRegistrationMode.Dynamic">@McpClientRegistrationMode.Dynamic</Radio>
										<Radio RadioButton Value="McpClientRegistrationMode.Static">@McpClientRegistrationMode.Static</Radio>
									</RadioGroup>
								</FormItem>
	
							}
					 </GridCol>

					@if (context.McpClientAuthenticationMode == McpClientAuthenticationMode.ApiKey)
					{
			 
						 <GridCol Class="gutter-row" Span="8">
						  <FormItem Label="Name" >
								 <InputPassword />
							</FormItem>
						 </GridCol>
						  <GridCol Class="gutter-row" Span="16">
		
						  <FormItem Label="Value" >
								 <InputPassword />
							</FormItem>
						 </GridCol>
					} 
			@if (context.McpClientRegistrationMode == McpClientRegistrationMode.Static && context.McpClientAuthenticationMode == McpClientAuthenticationMode.OAuth)
				{
					
				 <GridCol Class="gutter-row" Span="12">
				 <GridRow>
				 
				  <GridCol Class="gutter-row" Span="24">
		
				   <FormItem Label="Client Id" >
						 <Input @bind-Value="@context.ClientId"/>
					</FormItem>
				 </GridCol>
					
					
				  <GridCol Class="gutter-row" Span="24">
		
				  <FormItem Label="Client Secret" >
						 <InputPassword @bind-Value="@context.ClientSecrect" />
					</FormItem>
				 </GridCol> 
				 <GridCol Class="gutter-row" Span="24">
		
					
				   <FormItem Label="Callback Url" >
				   @{var callbackUrl = Navigation.BaseUri + "callback";}
						  <AntDesign.Input DefaultValue="@callbackUrl" Disabled >
								 <AddOnAfter>
								 <Tooltip Title="Click to copy callback Url, which you might need to configure">
									<Icon Type="@IconType.Outline.Copy" OnClick="(e)=> OnCopyClick(e,callbackUrl)" /> 
								 </Tooltip>
								
								 </AddOnAfter>
							 </AntDesign.Input>
					</FormItem>
				 </GridCol>
				</GridRow>
				 </GridCol>

				  <GridCol Class="gutter-row" Span="12">
				<FormItem Label="Additional Authorization Parameter(s)">
				<LabelTemplate>
				<Space Size="SpaceSize.Large">
				<SpaceItem>
				<Text>Additional Authorization Parameter(s)</Text>
				</SpaceItem>
				<SpaceItem>
				<Button OnClick="addRow" Type="ButtonType.Primary"  Ghost Size="ButtonSize.Small">
					Add
				</Button>
				</SpaceItem>
				</Space>
				</LabelTemplate>
				<ChildContent>
				<Table ScrollY="160px" ScrollBarWidth="5px" DataSource="@context.AdditionalAuthorizationParameters" 
				Total="@context.AdditionalAuthorizationParameters.Count" 
						TItem="AdditionalParameters" 
							Context="row" Size="TableSize.Small"
								HidePagination Bordered>
									        <PropertyColumn Width="30%" Property="c=>c.Key">
												<FormItem Required>
													<Input @bind-Value="@row.Key" />
												</FormItem>
											</PropertyColumn>
											<PropertyColumn Property="c=>c.Value">
												<FormItem Required>
													<Input @bind-Value="@row.Value" />
												</FormItem>
											</PropertyColumn>
								</Table>
				</ChildContent>
						
					
				</FormItem>
				   
				 </GridCol>
			}

			 <GridCol Span="24">
		  	<FormItem Label="Endpoint">
					<Search 
							Type="InputType.Url"  
							Placeholder="input search text"  
							 EnterButton="true" @bind-Value="@context.Url" OnSearch="OnSearch" >
					</Search>
				</FormItem>
		 </GridCol>
		 <GridCol>
		 @if (context.Tools.Count>0)
					{
						<div style="margin-bottom:10px">Available Tools</div>
						<Table DataSource="@context.Tools" Total="@context.Tools.Count"
						TItem="McpTool" SelectedRowsChanged="OnSelectedRowsChanged"  RowKey="x=>x.Name"
						
							Context="rowx" Size="TableSize.Small"
								HidePagination Bordered>
										<Selection />
									    <PropertyColumn Property="c=>c.Name" />
										<PropertyColumn Property="c=>c.Description" />
								</Table>
					}
		 </GridCol>
    </GridRow>
         
        </Form>
		;
	}
	public void RemoveSelection(string key)
	{
		this.selectedRows = selectedRows.Where(x => x.Name != key).ToList();
	}

	
	public async Task OnSearch()
	{
		try
		{
			var sseClientTransportOptions = new SseClientTransport(new SseClientTransportOptions
				{
					Endpoint = new(model.Url),
					AdditionalHeaders = model.McpClientAuthenticationMode == McpClientAuthenticationMode.ApiKey? new Dictionary<string, string> { { model.ApiKeyName, model.ApiKeyValue} }:null ,
					TransportMode= model.MCPTransportMode ==  MCPTransportMode.Sse? HttpTransportMode.Sse :HttpTransportMode.StreamableHttp,
					OAuth =model.McpClientAuthenticationMode == McpClientAuthenticationMode.OAuth?  new()
					{
						ClientId = model.ClientId,
						ClientSecret = model.ClientSecrect,
						ClientName = "lucidly",
						RedirectUri = new Uri(Navigation.BaseUri + "callback"),
						AuthorizationRedirectDelegate = OAuthHandler.HandleAuthorizationUrlAsync,
						AdditionalAuthorizationParameters =  model.AdditionalAuthorizationParameters.ToDictionary(x => x.Key, x => x.Value) 
					}:null
				});
			await using var mcpClient = await McpClientFactory.CreateAsync(sseClientTransportOptions,new McpClientOptions{ProtocolVersion="2025-03-26"});
			var availableTools = await mcpClient.ListToolsAsync();
			model.AccessToken= sseClientTransportOptions.CurrentAccessToken;
			model.Tools =availableTools.Select(x => new McpTool(x.Name,x.Description)).ToList();
			await modalRef!.UpdateConfigAsync();

		}
		catch (Exception ex)
		{

			throw; 
		}

	}



	bool _submitting = false;
	private Form<McpClientConfigModel> _form;
	ModalRef modalRef = default;

	private McpClientConfigModel model = new McpClientConfigModel();
	async Task addRow()
	{
		model.AdditionalAuthorizationParameters.Add(new());
		await modalRef?.UpdateConfigAsync();

	}
	private void ShowModal()
	{
		_visible = true;
	}

	/// <summary>
	/// on modal OK button is click, submit form manually
	/// </summary>
	/// <param name="e"></param>
	private async Task HandleOk(MouseEventArgs e)
	{
		_submitting = true;
		//   await Task.Delay(1000);
		_form.Submit();
	}

	private void HandleCancel(MouseEventArgs e)
	{
		Console.WriteLine(e);
	}

	/// <summary>
	/// when form is submited, close the modal
	/// </summary>
	/// <param name="args"></param>
	private async Task OnFinish(EditContext editContext)
	{
		model.Tools = selectedRows.ToList();
		AvailableTools.RemoveAll(x => x.Url == model.Url);
		AvailableTools.Add(model);

		totalToolsCount = AvailableTools.Sum(group => group.Tools.Count);

		await ProtectedLocalStorage.SetAsync("availableTools", AvailableTools);

		Console.WriteLine($"Success:{JsonSerializer.Serialize(model)}");
        _submitting = false;
        _visible = false;
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }
	
    string text = @"
A dog is a type of domesticated animal.
Known for its loyalty and faithfulness,
it can be found as a welcome guest in many households across the world.
";

    void Callback(string[] keys)
    {
        Console.WriteLine(string.Join(',', keys));
    }


    List<Data> datas=new List<Data>();
	 		
	RenderFragment replyAction =@<span>Reply to</span>;

	CancellationTokenSource cancellationTokenSource;	
	async Task onCancel()
	{
		  await hubConnection.SendAsync("OnCancel");
    
		cancellationTokenSource?.Cancel();
	}
 
	public  class Data
    {
        public string BubbleId { get; set; }
        public string Author { get; set; }
        public string Avatar { get; set; }
        public RenderFragment Content { get; set; }
        public string ContentAsStr { get; set; }
        public List<RenderFragment> Actions;
        public RenderFragment Datetime;
        public string Type { get; set; }
    }
	async Task onSubmit()
    {				
		isStreaming = true;

		cancellationTokenSource = new CancellationTokenSource();//StreamMessage

		var channel = await hubConnection.StreamAsChannelAsync<ChatBubble>("StreamMessage","You",recognizedText,AvailableTools,cancellationTokenSource.Token);
		 // var channel =  hubConnection.StreamAsync<ChatBubble>("StreamGroup","You",recognizedText,AvailableTools,cancellationTokenSource.Token);
 		recognizedText= "";

		//           await foreach (var response in channel)
		//           {
		// 		var loadingState = datas;
		// 	if (loadingState!= null)
		// 		{
		// 			datas.RemoveAll(x => x.Author == "...");
		// 		}
		// 	var hasMessage = datas.Find(x => x.BubbleId == response.BubbleId);
		// 	if (hasMessage!= null)
		// 	{
		// 		if (response.Type == "tool")
		// 		{
		// 			hasMessage.ContentAsStr += response.Message;
		// 		}
		// 		else
		// 		{
		// 			hasMessage.ContentAsStr = response.Message;
		// 		}
		// 		hasMessage.Content =@<MarkdownComponent MarkdownContent="@(hasMessage.ContentAsStr)"/>;
		// 	}
		// 	else
		// 	{
		// 			this.datas.Add(new Data()
		// 			{
		// 				BubbleId=response.BubbleId,
		// 				Author = response.User,
		// 				Avatar = @"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
		// 				Content = @<MarkdownComponent MarkdownContent="@(response.Message)"/>,
		// 				ContentAsStr = response.Message,
		// 				Datetime =  @<Tooltip Title="@(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))">
		// 								   <span>
		// 									   @(MomentHelper.FromNow(DateTime.Now))
		// 								   </span>
		// 								</Tooltip>,
		// 				Actions = new List<RenderFragment>() 
		// 				{
		// 					@<Button Type="ButtonType.Text" Shape="ButtonShape.Circle" 
		// 					Icon="@IconType.Outline.CustomerService" 
		// 					Onclick ="()=>StartSpeaking(bubbleId:response.BubbleId)" />
		// 				}
		// 			}); 

		// 			if (response.User == "You")
		// 			{
		// 				this.datas.Add(new Data()
		// 					{
		// 						Author = "...",
		// 						Avatar = @"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
		// 						Content = @<Skeleton Active="true" Style="width:70vw"></Skeleton>,
		// 						ContentAsStr = "",
		// 						Datetime =  @<Tooltip Title="@(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))">
		// 										   <span>
		// 											   @(MomentHelper.FromNow(DateTime.Now))
		// 										   </span>
		// 										</Tooltip>
		// ,
		// 						Actions = new List<RenderFragment>() 
		// 						{

		// 						}
		// 					}); 
		// 			}
		// 		}


		// 		await InvokeAsync(StateHasChanged);
		//           }



		// Wait asynchronously for data to become available
		var timelinedata = new List<string>();
		while (await channel.WaitToReadAsync())
		{
			// Read all currently available data synchronously, before waiting for more data
			while (channel.TryRead(out var response))
			{  
			
			datas.RemoveAll(x => x.Author == "...");
			
			var hasMessage = datas.Find(x => x.BubbleId == response.BubbleId);
			if (hasMessage!= null)
			{
				if (response.Type == "function-request")
					{

					hasMessage.Content =@<span><MarkdownComponent MarkdownContent="@(response.Message)"/><Space>
					<SpaceItem><Button Type="ButtonType.Primary" OnClick="()=>Approve(response.PendingFunctionCall.Id)">Approve</Button> </SpaceItem>
					<SpaceItem><Button OnClick="()=>Reject(response.PendingFunctionCall.Id)">Reject</Button> </SpaceItem>
					</Space>
					</span> ;
				}
				else if (response.Type == "function-approved")
					{
					timelinedata.Add($"Permissing to run {response.PendingFunctionCall.Function} Approved by user.");
					hasMessage.Content =@<span><MarkdownComponent MarkdownContent="@(response.Message)"/>
					</span> ;
				}
				else
				{
					hasMessage.Content =@<MarkdownComponent MarkdownContent="@(response.Message)"/>;
				}
				hasMessage.ContentAsStr = response.Message;
			}
			else
			{
					this.datas.Add(new Data()
					{
						BubbleId=response.BubbleId,
						Author = response.User,
						Avatar = @"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
						Content =@<MarkdownComponent MarkdownContent="@(response.Message)"/>,
						ContentAsStr = response.Message,
						Datetime =  @<Tooltip Title="@(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))">
										   <span>
											   @(MomentHelper.FromNow(DateTime.Now))
										   </span>
										</Tooltip>,
						Actions = new List<RenderFragment>() 
						{
							@<Button Type="ButtonType.Text" Shape="ButtonShape.Circle" 
							Icon="@IconType.Outline.CustomerService" 
							Onclick ="()=>StartSpeaking(bubbleId:response.BubbleId)" />
						}
					}); 
					

					if (response.User == "You")
					{
						this.datas.Add(new Data()
							{
								Author = "...",
								Avatar = @"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
								Content = @<Skeleton Active="true" Style="width:70vw"></Skeleton>,
								ContentAsStr = "",
								Datetime =  @<Tooltip Title="@(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"))">
												   <span>
													   @(MomentHelper.FromNow(DateTime.Now))
												   </span>
												</Tooltip>
		,
								Actions = new List<RenderFragment>() 
								{

								}
							}); 
					}
				}


				await InvokeAsync(StateHasChanged);
			}
		}



		//	await hubConnection.SendAsync("SendMessage", "You",recognizedText);

	}

	private async Task Approve(string functionCallId)
    {
                                        // Implement the logic for approving the function call here.
        await Http.PostAsync($"https://localhost:7255/api/approvals/approve/{functionCallId}", null);
    }private async Task Reject(string functionCallId)
    {
                                        // Implement the logic for approving the function call here.
        await Http.PostAsync($"https://localhost:7255/api/approvals/reject/{functionCallId}", null);
    }
	private string MarkdownText = @"
# Hello Markdown

This is a basic demo of the Markdown component.

## Features

- **Bold** and *italic* text
- Lists and nested lists
- Code blocks with syntax highlighting
- Tables and math formulas

### Code Example

```csharp
public class HelloWorld
{
        public static void Main()
        {
                Console.WriteLine(""Hello, World!"");
        }
}
```

### Table Example

| Feature | Support |
| ---------| ---------|
| Markdown | ✅ |
| Code Highlight | ✅ |
| Components | ✅ |
| Math | ✅ |

> This is a blockquote

";
	private HubConnection? hubConnection;
	private List<string> messages = [];
	private List<McpClientConfigModel> AvailableTools = [];

	protected override async Task OnInitializedAsync()
	{   
		hubConnection = new HubConnectionBuilder()
			.WithUrl(new Uri("https://localhost:7255/solo"))
			.Build();
		hubConnection.On("OnReceiveMessageEnd", () =>
		{

			isStreaming = false;
			InvokeAsync(StateHasChanged);
		});
	
        await hubConnection.StartAsync();
		await hubConnection.InvokeAsync("JoinGroup", "You");

		var alreadyAvailableTools = await ProtectedLocalStorage.GetAsync<List<McpClientConfigModel>>("availableTools");
		AvailableTools = alreadyAvailableTools.Success ? alreadyAvailableTools.Value! : new List<McpClientConfigModel>();
 		totalToolsCount = AvailableTools.Sum(group => group.Tools.Count);
	}
	 RenderFragment header =>
        @<div>
            @if (datas.Any())
            {
                <span>
                    @($"{datas.Count} {(datas.Count > 1 ? "replies" : "reply")}")
                </span>
            }
        </div>
			;


	private string recognizedText = "";
	private bool isListening = false;
	private bool isStreaming = false;
	private DotNetObjectReference<Home>? objRef;
	protected override void OnInitialized()
	{
		objRef = DotNetObjectReference.Create(this);
	}

	private async Task StartSpeechRecognition()
	{

		await JS.InvokeVoidAsync("speechRecognizer.startRecognition", objRef);
		isListening = true;
	}
	private async Task StartSpeaking(string bubbleId)
	{			
		var hasMessage = datas.Find(x => x.BubbleId == bubbleId);
		await JS.InvokeVoidAsync("TextToSpeech.startRecognition", objRef,hasMessage.ContentAsStr);
	}
	[JSInvokable]
	public Task OnSpeechRecognized(string text)
	{
		recognizedText = text;
		StateHasChanged();
		return Task.CompletedTask;
	}
	public async Task StopSpeechRecognition()
	{
		isListening = false;
		await JS.InvokeVoidAsync("speechRecognizer.stopRecognition", objRef);
	}
	public void Dispose()
	{
		objRef?.Dispose();
	}
	private void OnValueChanged(string args)
	{
		recognizedText = args;
	}
	private void OnChatModeChange(ChatModeEnum mode)
	{
		_agentsVisible = mode == ChatModeEnum.Collaborative;
	}
	private void OnAddNewMcpToolClick(MouseEventArgs args)
	{
		model = new McpClientConfigModel();
		modalRef = ModalService.CreateModal(new()
        {
			MaskClosable = false,
		   Maximizable=false,
		   Centered=true,
		   DefaultMaximized=false,
		   Style = "max-height: 95vh;overflow-y:auto;",
		   Width = "50vw",
			OkText= "Add",
			OkButtonProps= new ButtonProps{Disabled = false},
			Title= "Add New Remote MCP Server",
            Content = FormTemplate(),
            OnOk = async e =>
            {
                modalRef?.SetConfirmLoading(true);
                if (!_form.Validate())
                {
                    modalRef?.SetConfirmLoading(false);
                    return;
                }

                _form.Submit();

                await modalRef.CloseAsync();

                 _form.Reset();
            },
            OnCancel = async e =>
            {   
                if (!_form.IsModified || await ModalService.ConfirmAsync(new() { Content = "Are you sure you want to discard the entries?" }))
                {   
                    await modalRef.CloseAsync();
                     _form.Reset();
                }
            },
        });
	}

	private async Task OnCopyClick(MouseEventArgs args, string textToCopy)
	{
		await JS.InvokeVoidAsync("clipboardCopy.copyText", textToCopy);
	}
	bool isOkDisabled = true;
	private async Task OnSelectedRowsChanged(IEnumerable<McpTool> args)
	{
		if (args.Count() > 0)
		{
			modalRef.Config.OkButtonProps.Disabled = false;
		}
		else
		{
			modalRef.Config.OkButtonProps.Disabled = true;
		}		
		await	modalRef?.UpdateConfigAsync();


		selectedRows = args;
	}
}